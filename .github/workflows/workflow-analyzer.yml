# .github/workflows/workflow-analyzer.yml
name: GitHub Models Workflow Analyzer

on:
  workflow_run:
    workflows: ["*"]  # Trigger on all workflows
    types: [requested]
  
  # Also trigger on workflow dispatch for testing
  workflow_dispatch:
    inputs:
      target_workflow:
        description: 'Workflow file to analyze'
        required: true
        type: string

jobs:
  analyze-workflow:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          npm install axios yaml js-yaml

      - name: Get Workflow Information
        id: workflow-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            WORKFLOW_FILE="${{ github.event.workflow_run.path }}"
            WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            RUN_ID="${{ github.event.workflow_run.id }}"
          else
            WORKFLOW_FILE=".github/workflows/${{ github.event.inputs.target_workflow }}"
            WORKFLOW_NAME="${{ github.event.inputs.target_workflow }}"
            RUN_ID="manual-test"
          fi
          
          echo "workflow_file=$WORKFLOW_FILE" >> $GITHUB_OUTPUT
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Analyze Workflow with GitHub Models
        id: analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > analyze_workflow.js << 'EOF'
          const axios = require('axios');
          const fs = require('fs');
          const yaml = require('yaml');

          async function analyzeWorkflow() {
            const workflowFile = process.env.WORKFLOW_FILE;
            const workflowName = process.env.WORKFLOW_NAME;
            
            // Read workflow file
            const workflowContent = fs.readFileSync(workflowFile, 'utf8');
            const workflowYaml = yaml.parse(workflowContent);
            
            // Get repository context
            const repoFiles = await getRepoContext();
            const recentFailures = await getRecentFailures();
            
            // Prepare analysis prompt
            const analysisPrompt = createAnalysisPrompt(workflowContent, workflowYaml, repoFiles, recentFailures);
            
            // Call GitHub Models API
            const analysis = await callGitHubModels(analysisPrompt);
            
            // Parse and format results
            const result = parseAnalysisResult(analysis);
            
            // Output results for next steps
            console.log('ANALYSIS_RESULT<<EOF');
            console.log(JSON.stringify(result, null, 2));
            console.log('EOF');
            
            return result;
          }

          async function getRepoContext() {
            try {
              const response = await axios.get(`https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/contents`, {
                headers: {
                  'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json'
                }
              });
              
              return response.data.map(file => ({
                name: file.name,
                type: file.type,
                size: file.size
              })).filter(file => 
                file.name.includes('package.json') || 
                file.name.includes('requirements.txt') ||
                file.name.includes('Dockerfile') ||
                file.name.includes('pom.xml') ||
                file.name.includes('.env') ||
                file.type === 'dir'
              );
            } catch (error) {
              console.log('Error getting repo context:', error.message);
              return [];
            }
          }

          async function getRecentFailures() {
            try {
              const response = await axios.get(`https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/actions/runs?status=failure&per_page=5`, {
                headers: {
                  'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json'
                }
              });
              
              return response.data.workflow_runs.map(run => ({
                name: run.name,
                conclusion: run.conclusion,
                created_at: run.created_at,
                head_commit: run.head_commit?.message || 'Unknown commit'
              }));
            } catch (error) {
              console.log('Error getting recent failures:', error.message);
              return [];
            }
          }

          function createAnalysisPrompt(workflowContent, workflowYaml, repoFiles, recentFailures) {
            return `
          You are an expert GitHub Actions workflow analyzer. Analyze the following workflow and predict if it will succeed or fail, providing detailed reasoning.

          WORKFLOW TO ANALYZE:
          \`\`\`yaml
          ${workflowContent}
          \`\`\`

          REPOSITORY CONTEXT:
          Files in repository: ${JSON.stringify(repoFiles, null, 2)}

          RECENT WORKFLOW FAILURES:
          ${JSON.stringify(recentFailures, null, 2)}

          ANALYSIS REQUIREMENTS:
          1. Predict SUCCESS or FAILURE with confidence percentage
          2. Identify potential failure points with specific line references
          3. Check for common issues:
             - Missing dependencies or files
             - Environment variable issues
             - Permission problems
             - Syntax errors
             - Resource constraints
             - Compatibility issues
             - Network/external service dependencies
          4. Provide specific solutions for each identified issue
          5. Suggest workflow improvements

          RESPONSE FORMAT (JSON):
          {
            "prediction": "SUCCESS|FAILURE",
            "confidence": 85,
            "risk_level": "LOW|MEDIUM|HIGH|CRITICAL",
            "issues": [
              {
                "type": "DEPENDENCY|SYNTAX|PERMISSION|RESOURCE|NETWORK",
                "severity": "LOW|MEDIUM|HIGH|CRITICAL",
                "description": "Detailed description",
                "location": "Line number or step name",
                "solution": "Specific fix recommendation"
              }
            ],
            "recommendations": [
              "Improvement suggestion 1",
              "Improvement suggestion 2"
            ],
            "estimated_duration": "5-10 minutes",
            "resource_usage": "LOW|MEDIUM|HIGH"
          }
          `;
          }

          async function callGitHubModels(prompt) {
            try {
              const response = await axios.post('https://models.inference.ai.azure.com/chat/completions', {
                messages: [
                  {
                    role: 'system',
                    content: 'You are an expert GitHub Actions workflow analyzer. Always respond with valid JSON in the exact format requested.'
                  },
                  {
                    role: 'user',
                    content: prompt
                  }
                ],
                model: 'gpt-4o',
                temperature: 0.1,
                max_tokens: 2000
              }, {
                headers: {
                  'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
                  'Content-Type': 'application/json'
                }
              });

              return response.data.choices[0].message.content;
            } catch (error) {
              console.error('Error calling GitHub Models:', error.response?.data || error.message);
              throw error;
            }
          }

          function parseAnalysisResult(analysis) {
            try {
              // Extract JSON from response if wrapped in markdown
              const jsonMatch = analysis.match(/```json\n([\s\S]*?)\n```/) || analysis.match(/\{[\s\S]*\}/);
              const jsonStr = jsonMatch ? (jsonMatch[1] || jsonMatch[0]) : analysis;
              return JSON.parse(jsonStr);
            } catch (error) {
              console.error('Error parsing analysis result:', error.message);
              return {
                prediction: 'UNKNOWN',
                confidence: 0,
                risk_level: 'MEDIUM',
                issues: [{
                  type: 'ANALYSIS_ERROR',
                  severity: 'MEDIUM',
                  description: 'Failed to analyze workflow properly',
                  location: 'Unknown',
                  solution: 'Review workflow manually'
                }],
                recommendations: ['Manual review recommended'],
                estimated_duration: 'Unknown',
                resource_usage: 'UNKNOWN'
              };
            }
          }

          // Set environment variables and run analysis
          process.env.WORKFLOW_FILE = '${{ steps.workflow-info.outputs.workflow_file }}';
          process.env.WORKFLOW_NAME = '${{ steps.workflow-info.outputs.workflow_name }}';

          analyzeWorkflow().catch(console.error);
          EOF

          node analyze_workflow.js > analysis_output.txt 2>&1
          
          # Extract the analysis result
          sed -n '/ANALYSIS_RESULT<<EOF/,/EOF/p' analysis_output.txt | sed '1d;$d' > analysis_result.json
          
          # Set outputs
          echo "analysis_result=$(cat analysis_result.json | jq -c .)" >> $GITHUB_OUTPUT
          
          # Also save for artifact
          cp analysis_result.json $GITHUB_WORKSPACE/

      - name: Process Analysis Results
        id: process-results
        env:
          ANALYSIS_RESULT: ${{ steps.analyze.outputs.analysis_result }}
        run: |
          echo "$ANALYSIS_RESULT" | jq '.' > formatted_analysis.json
          
          PREDICTION=$(echo "$ANALYSIS_RESULT" | jq -r '.prediction')
          CONFIDENCE=$(echo "$ANALYSIS_RESULT" | jq -r '.confidence')
          RISK_LEVEL=$(echo "$ANALYSIS_RESULT" | jq -r '.risk_level')
          
          echo "prediction=$PREDICTION" >> $GITHUB_OUTPUT
          echo "confidence=$CONFIDENCE" >> $GITHUB_OUTPUT
          echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          
          # Create summary
          cat > workflow_analysis_summary.md << 'EOF'
          # 🔍 Workflow Analysis Report
          
          **Workflow:** ${{ steps.workflow-info.outputs.workflow_name }}
          **Prediction:** $PREDICTION
          **Confidence:** ${CONFIDENCE}%
          **Risk Level:** $RISK_LEVEL
          
          ## 📊 Analysis Details
          
          EOF
          
          echo "$ANALYSIS_RESULT" | jq -r '
          if .issues and (. .issues | length > 0) then
            "### ⚠️ Identified Issues\n" +
            (.issues[] | 
              "- **\(.severity)**: \(.description)\n" +
              "  - **Location**: \(.location)\n" +
              "  - **Solution**: \(.solution)\n"
            ) +
            "\n"
          else
            "### ✅ No Critical Issues Identified\n\n"
          end +
          
          if .recommendations and (.recommendations | length > 0) then
            "### 💡 Recommendations\n" +
            (.recommendations[] | "- \(.)\n") +
            "\n"
          else ""
          end +
          
          "### ⏱️ Estimated Duration: \(.estimated_duration // "Unknown")\n" +
          "### 🔧 Resource Usage: \(.resource_usage // "Unknown")"
          ' >> workflow_analysis_summary.md

      - name: Handle High-Risk Workflows
        if: steps.process-results.outputs.prediction == 'FAILURE' || steps.process-results.outputs.risk_level == 'CRITICAL'
        run: |
          echo "🚨 HIGH RISK WORKFLOW DETECTED!"
          echo "Prediction: ${{ steps.process-results.outputs.prediction }}"
          echo "Risk Level: ${{ steps.process-results.outputs.risk_level }}"
          echo "Confidence: ${{ steps.process-results.outputs.confidence }}%"
          
          # Cancel the target workflow if it's running
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Attempting to cancel workflow run: ${{ steps.workflow-info.outputs.run_id }}"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ steps.workflow-info.outputs.run_id }}/cancel"
          fi

      - name: Create Issue for Failed Predictions
        if: steps.process-results.outputs.prediction == 'FAILURE'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('workflow_analysis_summary.md', 'utf8');
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Workflow Failure Predicted: ${{ steps.workflow-info.outputs.workflow_name }}`,
              body: `${summary}
              
              ## 🔗 Context
              - **Commit**: ${{ github.sha }}
              - **Branch**: ${{ github.ref_name }}
              - **Triggered by**: ${{ github.actor }}
              - **Analysis Time**: ${new Date().toISOString()}
              
              ## 🛠️ Next Steps
              1. Review the identified issues above
              2. Apply the suggested solutions
              3. Test the workflow in a feature branch
              4. Re-run the analysis
              
              *This issue was automatically created by the GitHub Models Workflow Analyzer*`,
              labels: ['workflow-analysis', 'predicted-failure', 'needs-attention']
            });
            
            console.log(`Created issue #${issue.data.number}`);

      - name: Add PR Comment (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('workflow_analysis_summary.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 GitHub Models Workflow Analysis
              
              ${summary}
              
              *Analysis powered by GitHub Models*`
            });

      - name: Upload Analysis Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: workflow-analysis-${{ github.run_id }}
          path: |
            analysis_result.json
            formatted_analysis.json
            workflow_analysis_summary.md
          retention-days: 30

      - name: Set Job Summary
        run: |
          cat workflow_analysis_summary.md >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Analysis artifacts uploaded for detailed review**" >> $GITHUB_STEP_SUMMARY